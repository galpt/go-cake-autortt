name: Build Multi-Architecture Binaries

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      !startsWith(github.event.head_commit.message, 'chore: bump version')
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
    
    - name: Increment version
      id: tag
      run: |
        LATEST_TAG=${{ steps.get_tag.outputs.latest_tag }}
        # Remove 'v' prefix and split version
        VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New version: $NEW_TAG"
    
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.tag.outputs.new_tag }}
        git push origin ${{ steps.tag.outputs.new_tag }}

  build:
    runs-on: ubuntu-latest
    needs: auto-tag
    if: >
      always() &&
      (needs.auto-tag.result == 'success' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
        # Linux builds
        - goos: linux
          goarch: amd64
          name: linux-amd64
        - goos: linux
          goarch: arm64
          name: linux-arm64
        - goos: linux
          goarch: arm
          goarm: 7
          name: linux-armv7
        - goos: linux
          goarch: arm
          goarm: 6
          name: linux-armv6
        - goos: linux
          goarch: mips
          name: linux-mips
        - goos: linux
          goarch: mipsle
          name: linux-mipsle
        - goos: linux
          goarch: mips64
          name: linux-mips64
        - goos: linux
          goarch: mips64le
          name: linux-mips64le
        - goos: linux
          goarch: 386
          name: linux-386
        # Windows builds
        - goos: windows
          goarch: amd64
          name: windows-amd64
          ext: .exe
        - goos: windows
          goarch: 386
          name: windows-386
          ext: .exe
        - goos: windows
          goarch: arm64
          name: windows-arm64
          ext: .exe
        # FreeBSD builds (for pfSense/OPNsense)
        - goos: freebsd
          goarch: amd64
          name: freebsd-amd64
        - goos: freebsd
          goarch: arm64
          name: freebsd-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags "-s -w -X main.Version=${{ github.ref_name }}" -o dist/cake-autortt-${{ matrix.name }}${{ matrix.ext }} .

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip cake-autortt-${{ matrix.name }}.zip cake-autortt-${{ matrix.name }}${{ matrix.ext }}
        else
          tar -czf cake-autortt-${{ matrix.name }}.tar.gz cake-autortt-${{ matrix.name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cake-autortt-${{ matrix.name }}
        path: |
          dist/cake-autortt-${{ matrix.name }}*

  release:
    needs: [auto-tag, build]
    runs-on: ubuntu-latest
    if: >
      always() &&
      (needs.auto-tag.result == 'success' || startsWith(github.ref, 'refs/tags/v')) &&
      needs.build.result == 'success'
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: [auto-tag, build]
    if: >
      always() &&
      (needs.auto-tag.result == 'success' ||
       (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
       startsWith(github.ref, 'refs/tags/v')) &&
      needs.build.result == 'success'
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: env.DOCKERHUB_USERNAME != ''
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      if: env.DOCKERHUB_USERNAME != ''
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/go-cake-autortt
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      if: env.DOCKERHUB_USERNAME != ''
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
